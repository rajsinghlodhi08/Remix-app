<div class="discount-table-container">
  {% comment %} <div class="minimum-quantity-notice" style="margin-bottom: 10px; color: #664d03; background-color: #fff3cd; padding: 10px; border-radius: 4px;">
    <strong>Note:</strong> Minimum order quantity is 10 items
  </div> {% endcomment %}
  <h3>Bulk Discount Rules</h3>
  <table class="discount-table">
    <thead>
      <tr>
        <th>Quantity</th>
        <th>Discount (%)</th>
      </tr>
    </thead>
    <tbody id="discount-list">
      <tr>
        <td colspan="3">Loading...</td>
      </tr>
    </tbody>
  </table>

  <div class="price-summary" id="price-summary">
    <div class="price-row">
      <span>Original Price:</span>
      <span id="original-price">-</span>
    </div>
    <div class="price-row discount">
      <span>Discount Amount:</span>
      <span id="discount-amount">-</span>
    </div>
    <div class="price-row total">
      <span>Final Price:</span>
      <span id="final-price">-</span>
    </div>
  </div>
</div>

<style>
  .discount-table {
    width: 100%;
    border-collapse: collapse;
    margin: 20px 0;
  }
  .discount-table th, .discount-table td {
    border: 1px solid #ddd;
    padding: 8px;
    text-align: center;
  }
  .discount-table th {
    background-color: #f2f2f2;
  }
  .discount-table tr:nth-child(even) {
    background-color: #f9f9f9;
  }
  .discount-row {
    cursor: pointer;
    transition: background-color 0.2s;
  }
  .discount-row:hover {
    background-color: #e9e9e9;
  }
  .selected-discount {
    background-color: #e0f7e0 !important;
    border: 2px solid #4CAF50;
  }
  .price-summary {
    margin-top: 20px;
    padding: 15px;
    border: 1px solid #ddd;
    border-radius: 4px;
  }

  .price-row {
    display: flex;
    justify-content: space-between;
    margin: 5px 0;
  }

  .price-row.discount {
    color: #28a745;
  }

  .price-row.total {
    font-weight: bold;
    border-top: 1px solid #ddd;
    margin-top: 10px;
    padding-top: 10px;
  }

  /* Add styles for quantity input */
  input[name="quantity"] {
    width: 80px !important;
    padding: 8px !important;
    text-align: center !important;
    border: 1px solid #ddd !important;
    border-radius: 4px !important;
  }

  /* Style for quantity message */
  {% comment %} .quantity-message {
    margin: 5px 0;
    font-size: 0.9em;
  } {% endcomment %}

  /* Override any theme styles that might affect the quantity input */
  input[name="quantity"]:not([value=""]):not(:focus) {
    min-width: 80px !important;
  }

  /* Force minimum value using pseudo-element */
  input[name="quantity"]::before {
    content: attr(min);
  }
  
  /* Prevent values below minimum */
  input[name="quantity"]:invalid {
    border-color: #dc3545;
  }

  input[name="quantity"].invalid-quantity {
    border-color: #dc3545;
    background-color: #fff8f8;
  }

  /* Add a message about minimum quantity */
  .quantity-container {
    position: relative;
  }

  .quantity-container::after {
    content: "Minimum quantity: 10";
    display: block;
    font-size: 0.8em;
    color: #666;
    margin-top: 4px;
  }

  .cart-update-success {
    animation: fadeIn 0.3s ease;
  }

  .cart-update-error {
    animation: fadeIn 0.3s ease;
  }

  @keyframes fadeIn {
    from { opacity: 0; transform: translateY(-10px); }
    to { opacity: 1; transform: translateY(0); }
  }

  .selected-discount {
    background-color: #e8f5e9 !important;
    border-left: 4px solid #28a745 !important;
  }

  .price-display {
    display: flex;
    flex-direction: column;
    align-items: flex-end;
    gap: 4px;
  }

  .cart-item__price {
    min-width: 120px;
  }

  @media (max-width: 768px) {
    .price-display {
      align-items: flex-start;
    }
  }

  .cart-totals-summary {
    animation: fadeIn 0.3s ease;
  }

  @keyframes fadeIn {
    from { opacity: 0; transform: translateY(-10px); }
    to { opacity: 1; transform: translateY(0); }
  }

  .price-display {
    display: flex;
    flex-direction: column;
    gap: 4px;
  }

  @media (max-width: 768px) {
    .cart-totals-summary {
      margin: 0 10px;
    }
  }
</style>

<script>
  // Define the default minimum quantity at the top of the script
  const DEFAULT_MIN_QUANTITY = 10;

  document.addEventListener("DOMContentLoaded", function() {
    // Get all quantity inputs
    const quantityInputs = document.querySelectorAll('input[name="quantity"]');
    
    function initializeQuantityInput(input) {
      // Set initial attributes
      input.setAttribute('type', 'number');
      input.setAttribute('min', DEFAULT_MIN_QUANTITY);
      input.setAttribute('value', DEFAULT_MIN_QUANTITY);
      input.value = DEFAULT_MIN_QUANTITY;
      
      // Add event listeners for validation
      input.addEventListener('change', function(e) {
        console.log(e,'value of event');
        let value = parseInt(e.target.value);
        if (isNaN(value) || value < DEFAULT_MIN_QUANTITY) {
          value = DEFAULT_MIN_QUANTITY;
        }
        e.target.value = value;
      });

      // Prevent manual input of values below minimum
      input.addEventListener('input', function(e) {
        let value = parseInt(e.target.value);
        if (isNaN(value) || value < DEFAULT_MIN_QUANTITY) {
          e.target.classList.add('invalid-quantity');
        } else {
          e.target.classList.remove('invalid-quantity');
        }
      });

      // Prevent form submission if quantity is invalid
      input.closest('form')?.addEventListener('submit', function(e) {
        const value = parseInt(input.value);
        if (isNaN(value) || value < DEFAULT_MIN_QUANTITY) {
          e.preventDefault();
          input.value = DEFAULT_MIN_QUANTITY;
          alert('Minimum quantity required is ' + DEFAULT_MIN_QUANTITY);
        }
      });
    }

    // Initialize all quantity inputs
    quantityInputs.forEach(initializeQuantityInput);

    // Use MutationObserver to handle dynamically added quantity inputs
    const observer = new MutationObserver(function(mutations) {
      mutations.forEach(function(mutation) {
        mutation.addedNodes.forEach(function(node) {
          if (node.nodeType === 1 && node.matches('input[name="quantity"]')) {
            initializeQuantityInput(node);
          }
        });
      });
    });

    // Start observing the document for added quantity inputs
    observer.observe(document.body, {
      childList: true,
      subtree: true
    });
  });

  document.addEventListener("DOMContentLoaded", async function () {
    window.shopDomain = "{{ shop.permanent_domain }}";
    window.variantId = document.querySelector('input[name="id"]')?.value;
    console.log(window.variantId,'window.variantId');
    let selectedDiscount = null;

    try {
      const response = await fetch("/apps/discounts");
      const data = await response.json();    
      if (!data.success) {
        console.error("Error fetching discounts:", data.error);
        return;
      }    
      const discounts = data.discounts;
      const discountList = document.getElementById("discount-list");

      if (discountList) {
        discountList.innerHTML = discounts
          .map(
            (discount) => `
            <tr class="discount-row" data-min="${discount.min}" data-max="${discount.max}" data-percentage="${discount.percentage}">
              <td>${discount.min}-${discount.max}</td>
              <td>${discount.percentage}%</td>
            </tr>
          `
          )
          .join("");

        // Add click event listeners to all discount rows
        const discountRows = document.querySelectorAll('.discount-row');
        discountRows.forEach(row => {
          row.addEventListener('click', async function() {
            const minQuantity = Math.max(parseInt(this.dataset.min), DEFAULT_MIN_QUANTITY);
            const maxQuantity = parseInt(this.dataset.max);
            const discountPercentage = parseFloat(this.dataset.percentage);
            
            // Store selected discount
            selectedDiscount = {
              minQuantity,
              maxQuantity,
              percentage: discountPercentage
            };
            
            // Update quantity input
            const quantityInput = document.querySelector('input[name="quantity"]');
            if (quantityInput) {
              quantityInput.value = minQuantity;
              
              // Get product price
              const priceElement = document.querySelector('.price-item--regular');
              const price = parseFloat(priceElement?.getAttribute('data-original-price') || 
                                     priceElement?.innerText.replace(/[^0-9.]/g, ''));              
              // Update price display
              updatePriceDisplay(minQuantity, price, discountPercentage);
            }
            // Update cart with discount information           
            try {
              // First, validate the data
              {% comment %} if (!window.variantId) {
                throw new Error('Product variant ID not found');
              } {% endcomment %}

              // Prepare the cart update data
              const cartUpdateData = {
                items: [{
                  id: window.variantId,
                  quantity: minQuantity,
                  properties: {
                    'discount_percentage': discountPercentage.toString(),
                    'min_quantity': minQuantity.toString(),
                    'max_quantity': maxQuantity.toString()
                  }
                }]
              };

              // Update UI to show success
              discountRows.forEach(r => r.classList.remove('selected-discount'));
              this.classList.add('selected-discount');

              // Update price display
              const priceElement = document.querySelector('.price-item--regular');
              if (priceElement) {
                const price = parseFloat(priceElement.getAttribute('data-original-price') || 
                                       priceElement.innerText.replace(/[^0-9.]/g, ''));
                updatePriceDisplay(minQuantity, price, discountPercentage);
              }

            } catch (error) {
              console.error('Error updating cart:', error);
              
              // Show error message to user
              const errorMessage = document.createElement('div');
              errorMessage.className = 'cart-update-error';
              errorMessage.innerHTML = `
                <div style="
                  background-color: #f8d7da;
                  color: #721c24;
                  padding: 10px;
                  border-radius: 4px;
                  margin: 10px 0;
                  display: flex;
                  align-items: center;
                  justify-content: space-between;
                ">
                  <span>${error.message || 'Failed to update cart. Please try again.'}</span>
                  <button onclick="this.parentElement.remove()" style="
                    background: none;
                    border: none;
                    color: #721c24;
                    cursor: pointer;
                  ">×</button>
                </div>
              `;
              this.closest('.discount-table-container').insertAdjacentElement('afterbegin', errorMessage);
            }
          });
        });
      }
    } catch (error) {
      console.error("Error fetching discount data:", error);
    }
  });
 
      

  function updatePriceDisplay(quantity, price, discountPercentage) {
    const originalTotal = quantity * price;
    const discountAmount = (originalTotal * discountPercentage) / 100;
    const finalPrice = originalTotal - discountAmount;

    const formatter = new Intl.NumberFormat('en-US', {
      style: 'currency',
      currency: 'USD'
    });

    document.getElementById('original-price').textContent = formatter.format(originalTotal);
    document.getElementById('discount-amount').textContent = `-${formatter.format(discountAmount)}`;
    document.getElementById('final-price').textContent = formatter.format(finalPrice);
  }


</script>
{% comment %} <script src="{{'discount-script.js' | asset_url }}" defer></script> {% endcomment %}

{% schema %}
{
  "name": "Discount List",
  "target": "section",
  "settings": []
}
{% endschema %}